// +build !

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.CRDRequest":       schema_pkg_apis_config_v1alpha1_CRDRequest(ref),
		"github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.Config":           schema_pkg_apis_config_v1alpha1_Config(ref),
		"github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.ConfigSpec":       schema_pkg_apis_config_v1alpha1_ConfigSpec(ref),
		"github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.ConfigSpecStatus": schema_pkg_apis_config_v1alpha1_ConfigSpecStatus(ref),
		"github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.Kerberus":         schema_pkg_apis_config_v1alpha1_Kerberus(ref),
		"github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.KerberusSpec":     schema_pkg_apis_config_v1alpha1_KerberusSpec(ref),
		"github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.KerberusStatus":   schema_pkg_apis_config_v1alpha1_KerberusStatus(ref),
		"github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.RBACConfig":       schema_pkg_apis_config_v1alpha1_RBACConfig(ref),
	}
}

func schema_pkg_apis_config_v1alpha1_CRDRequest(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CRDRequest defines configuration for CRDRequest operator",
				Properties: map[string]spec.Schema{
					"enable": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"allowAll": {
						SchemaProps: spec.SchemaProps{
							Description: "if allowAll is set, we allow all but deny list",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"deny": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"denyAll": {
						SchemaProps: spec.SchemaProps{
							Description: "if denyAll is set, we deny all but allow list",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"allow": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_config_v1alpha1_Config(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConfigSpec is the Schema for the ConfigSpecs API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.ConfigSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.ConfigSpecStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.ConfigSpec", "github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.ConfigSpecStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_config_v1alpha1_ConfigSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConfigSpec defines the desired state of ConfigSpec",
				Properties: map[string]spec.Schema{
					"crdRequest": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.CRDRequest"),
						},
					},
					"rbacConfig": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.RBACConfig"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.CRDRequest", "github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.RBACConfig"},
	}
}

func schema_pkg_apis_config_v1alpha1_ConfigSpecStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConfigSpecStatus defines the observed state of ConfigSpec",
				Properties: map[string]spec.Schema{
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "List of conditions for the CR",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.Condition"),
									},
								},
							},
						},
					},
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "State that this condition represents",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"state"},
			},
		},
		Dependencies: []string{
			"github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.Condition"},
	}
}

func schema_pkg_apis_config_v1alpha1_Kerberus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Kerberus is the Schema for the kerberus API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.KerberusSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.KerberusStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.KerberusSpec", "github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1.KerberusStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_config_v1alpha1_KerberusSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KerberusSpec defines the desired state of Kerberus",
				Properties:  map[string]spec.Schema{},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_config_v1alpha1_KerberusStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KerberusStatus defines the observed state of Kerberus",
				Properties:  map[string]spec.Schema{},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_config_v1alpha1_RBACConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RBACConfig defines configuration for RBAC operator",
				Properties: map[string]spec.Schema{
					"enable": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"whiteList": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"blackList": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}
