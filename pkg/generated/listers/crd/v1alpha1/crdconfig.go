/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kerberushq/kerberus/pkg/apis/crd/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CRDConfigLister helps list CRDConfigs.
type CRDConfigLister interface {
	// List lists all CRDConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CRDConfig, err error)
	// CRDConfigs returns an object that can list and get CRDConfigs.
	CRDConfigs(namespace string) CRDConfigNamespaceLister
	CRDConfigListerExpansion
}

// cRDConfigLister implements the CRDConfigLister interface.
type cRDConfigLister struct {
	indexer cache.Indexer
}

// NewCRDConfigLister returns a new CRDConfigLister.
func NewCRDConfigLister(indexer cache.Indexer) CRDConfigLister {
	return &cRDConfigLister{indexer: indexer}
}

// List lists all CRDConfigs in the indexer.
func (s *cRDConfigLister) List(selector labels.Selector) (ret []*v1alpha1.CRDConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CRDConfig))
	})
	return ret, err
}

// CRDConfigs returns an object that can list and get CRDConfigs.
func (s *cRDConfigLister) CRDConfigs(namespace string) CRDConfigNamespaceLister {
	return cRDConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CRDConfigNamespaceLister helps list and get CRDConfigs.
type CRDConfigNamespaceLister interface {
	// List lists all CRDConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CRDConfig, err error)
	// Get retrieves the CRDConfig from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CRDConfig, error)
	CRDConfigNamespaceListerExpansion
}

// cRDConfigNamespaceLister implements the CRDConfigNamespaceLister
// interface.
type cRDConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CRDConfigs in the indexer for a given namespace.
func (s cRDConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CRDConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CRDConfig))
	})
	return ret, err
}

// Get retrieves the CRDConfig from the indexer for a given namespace and name.
func (s cRDConfigNamespaceLister) Get(name string) (*v1alpha1.CRDConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("crdconfig"), name)
	}
	return obj.(*v1alpha1.CRDConfig), nil
}
