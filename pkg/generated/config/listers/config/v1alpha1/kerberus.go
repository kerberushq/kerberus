/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KerberusLister helps list Kerberuses.
type KerberusLister interface {
	// List lists all Kerberuses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Kerberus, err error)
	// Kerberuses returns an object that can list and get Kerberuses.
	Kerberuses(namespace string) KerberusNamespaceLister
	KerberusListerExpansion
}

// kerberusLister implements the KerberusLister interface.
type kerberusLister struct {
	indexer cache.Indexer
}

// NewKerberusLister returns a new KerberusLister.
func NewKerberusLister(indexer cache.Indexer) KerberusLister {
	return &kerberusLister{indexer: indexer}
}

// List lists all Kerberuses in the indexer.
func (s *kerberusLister) List(selector labels.Selector) (ret []*v1alpha1.Kerberus, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Kerberus))
	})
	return ret, err
}

// Kerberuses returns an object that can list and get Kerberuses.
func (s *kerberusLister) Kerberuses(namespace string) KerberusNamespaceLister {
	return kerberusNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KerberusNamespaceLister helps list and get Kerberuses.
type KerberusNamespaceLister interface {
	// List lists all Kerberuses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Kerberus, err error)
	// Get retrieves the Kerberus from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Kerberus, error)
	KerberusNamespaceListerExpansion
}

// kerberusNamespaceLister implements the KerberusNamespaceLister
// interface.
type kerberusNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Kerberuses in the indexer for a given namespace.
func (s kerberusNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Kerberus, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Kerberus))
	})
	return ret, err
}

// Get retrieves the Kerberus from the indexer for a given namespace and name.
func (s kerberusNamespaceLister) Get(name string) (*v1alpha1.Kerberus, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kerberus"), name)
	}
	return obj.(*v1alpha1.Kerberus), nil
}
