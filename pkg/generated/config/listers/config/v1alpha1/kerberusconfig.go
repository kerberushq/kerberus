/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kerberushq/kerberus/pkg/apis/config/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KerberusConfigLister helps list KerberusConfigs.
type KerberusConfigLister interface {
	// List lists all KerberusConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KerberusConfig, err error)
	// KerberusConfigs returns an object that can list and get KerberusConfigs.
	KerberusConfigs(namespace string) KerberusConfigNamespaceLister
	KerberusConfigListerExpansion
}

// kerberusConfigLister implements the KerberusConfigLister interface.
type kerberusConfigLister struct {
	indexer cache.Indexer
}

// NewKerberusConfigLister returns a new KerberusConfigLister.
func NewKerberusConfigLister(indexer cache.Indexer) KerberusConfigLister {
	return &kerberusConfigLister{indexer: indexer}
}

// List lists all KerberusConfigs in the indexer.
func (s *kerberusConfigLister) List(selector labels.Selector) (ret []*v1alpha1.KerberusConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KerberusConfig))
	})
	return ret, err
}

// KerberusConfigs returns an object that can list and get KerberusConfigs.
func (s *kerberusConfigLister) KerberusConfigs(namespace string) KerberusConfigNamespaceLister {
	return kerberusConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KerberusConfigNamespaceLister helps list and get KerberusConfigs.
type KerberusConfigNamespaceLister interface {
	// List lists all KerberusConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KerberusConfig, err error)
	// Get retrieves the KerberusConfig from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KerberusConfig, error)
	KerberusConfigNamespaceListerExpansion
}

// kerberusConfigNamespaceLister implements the KerberusConfigNamespaceLister
// interface.
type kerberusConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KerberusConfigs in the indexer for a given namespace.
func (s kerberusConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KerberusConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KerberusConfig))
	})
	return ret, err
}

// Get retrieves the KerberusConfig from the indexer for a given namespace and name.
func (s kerberusConfigNamespaceLister) Get(name string) (*v1alpha1.KerberusConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kerberusconfig"), name)
	}
	return obj.(*v1alpha1.KerberusConfig), nil
}
